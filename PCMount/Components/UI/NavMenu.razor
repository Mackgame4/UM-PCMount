@namespace PCMount.Components.UI

@using Microsoft.FluentUI.AspNetCore.Components
@inject NavigationManager Navigation
@rendermode InteractiveServer

<div class="flex flex-col relative w-full">
    <FluentStack Orientation="Orientation.Horizontal" Width="100%" class="p-4">
        <NavLink href="/" Match="NavLinkMatch.All"><img src="/assets/pcmountlogo.png" Slot="start" width="30px"/></NavLink>
        <NavLink class="w-full" href="/dashboard" Match="NavLinkMatch.All">
            <FluentButton class="hidden sm:inline-flex" Appearance="Appearance.Accent">PCMount @(CurrentPageTitle != null ? "| " + CurrentPageTitle : "")</FluentButton>
        </NavLink>
        <FluentSpacer />
        <FluentCounterBadge Dot="false" Appearance="Appearance.Accent">
            <FluentButton id="notificationsPopover" IconStart="@(new Icons.Regular.Size20.BoxMultiple())" Appearance="Appearance.Outline" @onclick="() => _visibleNotificationsPopover = !_visibleNotificationsPopover"></FluentButton>
        </FluentCounterBadge>
        <AuthorizeView Roles="Admin, User">
            <Authorized>
                <FluentProfileMenu Initials="@(context.User.Identity!.Name?.Substring(0, 1).ToUpper() ?? string.Empty)">
                    <HeaderTemplate>
                        <FluentLabel Typo="@Typography.Subject">Welcome back, <b>@context.User.Identity!.Name</b>.</FluentLabel>
                    </HeaderTemplate>
                    <ChildContent>
                    </ChildContent>
                    <FooterTemplate>
                        <FluentStack>
                            <FluentButton id="themePopover" IconStart="@(new Icons.Regular.Size20.PaintBrush())" Appearance="Appearance.Outline" @onclick="() => _visibleThemePopover = !_visibleThemePopover">Theme</FluentButton>
                            <FluentSpacer />
                            <NavLink href="/logout" Match="NavLinkMatch.All">
                                <FluentButton IconStart="@(new Icons.Regular.Size20.ArrowExit())" Appearance="Appearance.Outline">Logout</FluentButton>
                            </NavLink>
                        </FluentStack>
                    </FooterTemplate>
                </FluentProfileMenu>
            </Authorized>
        </AuthorizeView>
    </FluentStack>
    <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>
</div>
<div class="sticky top-0 z-10" style="background-color: var(--neutral-fill-layer-rest);">
    <div class="p-3">
        @RenderMenuOptions
    </div>
    <FluentDivider Style="width: 100%;" Role="DividerRole.Presentation"></FluentDivider>
</div>

<FluentDesignTheme StorageName="theme" @bind-Mode="@Mode" @bind-OfficeColor="@OfficeColor" />
<FluentPopover class="rounded-md w-80" VerticalThreshold="170" AnchorId="themePopover" @bind-Open="_visibleThemePopover">
    <Header>@(new Emojis.Objects.Color.Default.Paintbrush().ToMarkup("20px")) Customize your experience</Header>
    <Body>
        <FluentGrid>
            <FluentGridItem>
                <FluentSelect class="w-full" Label="Theme" Items="@(Enum.GetValues<DesignThemeModes>())" Width="250px" @bind-SelectedOption="@Mode" />
            </FluentGridItem>
            <FluentGridItem>
                <FluentSelect class="w-full" Label="Color" Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))" Height="200px" Width="250px" @bind-SelectedOption="@OfficeColor">
                    <OptionTemplate>
                        <FluentStack>
                            <FluentLabel>@context</FluentLabel>  
                        </FluentStack>
                    </OptionTemplate> 
                </FluentSelect>
            </FluentGridItem>
        </FluentGrid>
    </Body>
</FluentPopover>

<FluentPopover class="rounded-md w-80" VerticalThreshold="170" AnchorId="notificationsPopover" @bind-Open="_visibleNotificationsPopover">
    <Header>@(new Emojis.Objects.Color.Default.OutboxTray().ToMarkup("20px")) Orders</Header>
    <Body>
        <span>Popover</span>
    </Body>
    <Footer>
        <FluentButton class="w-full" Appearance="Appearance.Lightweight">View all</FluentButton>
    </Footer>
</FluentPopover>

@code {
    bool _visibleThemePopover;
    bool _visibleNotificationsPopover;
    public DesignThemeModes Mode { get; set; }
    public OfficeColor? OfficeColor { get; set; }

    public class PageMetadata
    {
        public required string Path { get; set; }
        public required string Title { get; set; }
        public required Microsoft.FluentUI.AspNetCore.Components.Icon Icon { get; set; }
    }

    private List<PageMetadata> pagesmetadata = new List<PageMetadata>
    {
        new PageMetadata { Path = "/dashboard", Title = "Dashboard", Icon = new Icons.Regular.Size20.Home() },
        new PageMetadata { Path = "/dashboard/shop", Title = "Parts Shop", Icon = new Icons.Regular.Size20.Cart() },
        new PageMetadata { Path = "/dashboard/inventory", Title = "Inventory", Icon = new Icons.Regular.Size20.Box() },
        new PageMetadata { Path = "/dashboard/assembly", Title = "Assembly", Icon = new Icons.Regular.Size20.Wrench() }
    };

    private RenderFragment RenderMenuOptions => @<FluentStack Orientation="Orientation.Horizontal" Width="100%">
        @foreach (var pagemetadata in pagesmetadata)
        {
            <NavLink class="w-full" href="@pagemetadata.Path" Match="NavLinkMatch.All">
                <FluentButton class="w-full hidden sm:inline-flex" IconStart="@pagemetadata.Icon" Appearance="Appearance.Lightweight">@pagemetadata.Title</FluentButton>
                <FluentButton class="w-full inline-flex sm:hidden" IconStart="@pagemetadata.Icon" Appearance="Appearance.Lightweight"></FluentButton>
            </NavLink>
        }
    </FluentStack>;

    private string? CurrentPageTitle { get; set; }

    protected override void OnInitialized() // When component is loaded
    {
        base.OnInitialized();
        SetPageTitle();
        Navigation.LocationChanged += (sender, args) => SetPageTitle();  // Listen for navigation changes
    }

    private void SetPageTitle() {
        var uri = Navigation.Uri;
        var page = pagesmetadata.FirstOrDefault(p => uri.EndsWith(p.Path));
        CurrentPageTitle = page?.Title ?? pagesmetadata[0].Title; // Default to "Dashboard" if no match found
        StateHasChanged(); // Trigger UI update
    }
}