@namespace PCMount.Components.UI
@using Microsoft.FluentUI.AspNetCore.Components
@using PCMount.Data.Models
@implements IDialogContentComponent<Computer>

<FluentDialogHeader ShowDismiss="true">
    <FluentStack VerticalAlignment="VerticalAlignment.Center">
        <FluentIcon Value="@(new Icons.Regular.Size24.WindowApps())" />
        <FluentLabel Typo="Typography.PaneHeader">
            @Dialog!.Instance.Parameters.Title
        </FluentLabel>
    </FluentStack>
</FluentDialogHeader>
<FluentDialogBody>
    <FluentStack VerticalAlignment="VerticalAlignment.Center" Orientation="Orientation.Vertical" Gap="GapSize.Small">
        <FluentAutocomplete TOption="Part" AutoComplete="off" Label="Motherboard" OnOptionsSearch="@(e => OnSearch(e, "Motherboard"))" Placeholder="Select Motherboard" MaximumOptionsSearch="int.MaxValue" MaximumSelectedOptions="1" OptionText="@(item => item.Name)" @bind-SelectedOptions="SelectedMotherboards" />
        <FluentAutocomplete TOption="Part" AutoComplete="off" Label="Processor" OnOptionsSearch="@(e => OnSearch(e, "Processor"))" Placeholder="Select Processor" MaximumOptionsSearch="int.MaxValue" MaximumSelectedOptions="1" OptionText="@(item => item.Name)" @bind-SelectedOptions="SelectedProcessors" />
        <FluentAutocomplete TOption="Part" AutoComplete="off" Label="Memory" OnOptionsSearch="@(e => OnSearch(e, "Memory"))" Placeholder="Select Memory" MaximumOptionsSearch="int.MaxValue" MaximumSelectedOptions="1" OptionText="@(item => item.Name)" @bind-SelectedOptions="SelectedMemories" />
        <FluentAutocomplete TOption="Part" AutoComplete="off" Label="Graphics Card" OnOptionsSearch="@(e => OnSearch(e, "Graphics Card"))" Placeholder="Select Graphics Card" MaximumOptionsSearch="int.MaxValue" MaximumSelectedOptions="1" OptionText="@(item => item.Name)" @bind-SelectedOptions="SelectedGraphicsCards" />
        <FluentAutocomplete TOption="Part" AutoComplete="off" Label="Storage" OnOptionsSearch="@(e => OnSearch(e, "Storage"))" Placeholder="Select Storage" MaximumOptionsSearch="int.MaxValue" MaximumSelectedOptions="1" OptionText="@(item => item.Name)" @bind-SelectedOptions="SelectedStorages" />
        <FluentAutocomplete TOption="Part" AutoComplete="off" Label="Power Supply" OnOptionsSearch="@(e => OnSearch(e, "Power Supply"))" Placeholder="Select Power Supply" MaximumOptionsSearch="int.MaxValue" MaximumSelectedOptions="1" OptionText="@(item => item.Name)" @bind-SelectedOptions="SelectedPowerSupplies" />
        <FluentAutocomplete TOption="Part" AutoComplete="off" Label="Case" OnOptionsSearch="@(e => OnSearch(e, "Case"))" Placeholder="Select Case" MaximumOptionsSearch="int.MaxValue" MaximumSelectedOptions="1" OptionText="@(item => item.Name)" @bind-SelectedOptions="SelectedCases" />
    </FluentStack>
</FluentDialogBody>
<FluentDialogFooter>
    <FluentButton IconStart="@(new Icons.Regular.Size16.Cart())" Appearance="Appearance.Accent" OnClick="@SaveAsync">Add To Cart</FluentButton>
    <FluentButton Appearance="Appearance.Neutral" OnClick="@CancelAsync">Cancel</FluentButton>
</FluentDialogFooter>

@code {
    [Parameter]
    public Computer Content { get; set; } = new Computer { Name = "Custom Build", Price = 0, Image = "/assets/cdn/computer-custom-build.png" };

    [CascadingParameter]
    public FluentDialog? Dialog { get; set; }

    IEnumerable<Part> SelectedMotherboards = Array.Empty<Part>();
    IEnumerable<Part> SelectedProcessors = Array.Empty<Part>();
    IEnumerable<Part> SelectedMemories = Array.Empty<Part>();
    IEnumerable<Part> SelectedGraphicsCards = Array.Empty<Part>();
    IEnumerable<Part> SelectedStorages = Array.Empty<Part>();
    IEnumerable<Part> SelectedPowerSupplies = Array.Empty<Part>();
    IEnumerable<Part> SelectedCases = Array.Empty<Part>();

    Part[] Components = [
        new Part { PartId = 1, Name = "ASUS ROG Strix Z590-E", Preco = 300, Tipo = "Motherboard" },
        new Part { PartId = 2, Name = "NVIDIA GeForce RTX 3080", Preco = 800, Tipo = "Graphics Card" },
        new Part { PartId = 3, Name = "Intel Core i9-11900K", Preco = 700, Tipo = "Processor" },
        new Part { PartId = 4, Name = "Corsair Vengeance RGB Pro", Preco = 200, Tipo = "Memory" },
        new Part { PartId = 5, Name = "Samsung 970 EVO Plus", Preco = 200, Tipo = "Storage" },
        new Part { PartId = 6, Name = "Corsair RM850x", Preco = 150, Tipo = "Power Supply" },
        new Part { PartId = 7, Name = "NZXT H510", Preco = 100, Tipo = "Case" }
    ];

    private void OnSearch(OptionsSearchEventArgs<Part> e, string partType) {
        e.Items = Components
            .Where(part => part.Tipo == partType && part.Name.Contains(e.Text, StringComparison.OrdinalIgnoreCase));
    }

    private decimal calculatePrice() {
        decimal price = 0;
        price += (decimal)(SelectedMotherboards.FirstOrDefault()?.Preco ?? 0);
        price += (decimal)(SelectedProcessors.FirstOrDefault()?.Preco ?? 0);
        price += (decimal)(SelectedMemories.FirstOrDefault()?.Preco ?? 0);
        price += (decimal)(SelectedGraphicsCards.FirstOrDefault()?.Preco ?? 0);
        price += (decimal)(SelectedStorages.FirstOrDefault()?.Preco ?? 0);
        price += (decimal)(SelectedPowerSupplies.FirstOrDefault()?.Preco ?? 0);
        price += (decimal)(SelectedCases.FirstOrDefault()?.Preco ?? 0);
        return price;
    }

    private async Task SaveAsync() {
        Console.WriteLine("CustomBuild with:");
        Console.WriteLine($"Motherboard: {SelectedMotherboards.FirstOrDefault()?.Name}");
        Console.WriteLine($"Processor: {SelectedProcessors.FirstOrDefault()?.Name}");
        Console.WriteLine($"Memory: {SelectedMemories.FirstOrDefault()?.Name}");
        Console.WriteLine($"Graphics Card: {SelectedGraphicsCards.FirstOrDefault()?.Name}");
        Console.WriteLine($"Storage: {SelectedStorages.FirstOrDefault()?.Name}");
        Console.WriteLine($"Power Supply: {SelectedPowerSupplies.FirstOrDefault()?.Name}");
        Console.WriteLine($"Case: {SelectedCases.FirstOrDefault()?.Name}");
        Content = new Computer {
            Name = "Custom Build",
            Price = calculatePrice(),
            Image = "/assets/cdn/computer-custom-build.png",
            Motherboard = SelectedMotherboards.FirstOrDefault(),
            Processor = SelectedProcessors.FirstOrDefault(),
            Memory = SelectedMemories.FirstOrDefault(),
            GraphicsCard = SelectedGraphicsCards.FirstOrDefault(),
            Storage = SelectedStorages.FirstOrDefault(),
            PowerSupply = SelectedPowerSupplies.FirstOrDefault(),
            Case = SelectedCases.FirstOrDefault()
        };
        Console.WriteLine($"Price: {Content.Price}");
        await Dialog!.CloseAsync(Content);
    }

    private async Task CancelAsync() {
        await Dialog!.CancelAsync();
    }
}