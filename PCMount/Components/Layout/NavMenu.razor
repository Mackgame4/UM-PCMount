@using Microsoft.FluentUI.AspNetCore.Components
@rendermode InteractiveServer
@inject NavigationManager Navigation

<div class="fixed top-0 nav w-full pb-6 shadow-md">
    <div class="flex flex-col relative w-full">
        <FluentStack Orientation="Orientation.Horizontal" Width="100%">
            <div class="flex w-full justify-between items-center p-4">
                <div class="flex gap-4 items-center">
                    <NavLink href="" Match="NavLinkMatch.All" ><img src="/assets/pcmountlogo.png" Slot="start" width="50px"/></NavLink>
                    <NavLink class="w-full" href="" Match="NavLinkMatch.All">
                        <FluentButton class="hidden sm:inline-flex" Appearance="Appearance.Accent">
                            <span class="text-lg font-medium">PCMount @(CurrentPageTitle != null ? "| " + CurrentPageTitle : "")</span>
                        </FluentButton>
                    </NavLink>
                </div>
                <FluentSpacer />
                <div class="flex gap-3">
                    <FluentCounterBadge Dot="true" Appearance="Appearance.Accent">
                        <FluentButton id="notificationsPopover" IconStart="@(new Icons.Regular.Size20.BoxMultiple())" Appearance="Appearance.Outline" @onclick="() => _visibleNotificationsPopover = !_visibleNotificationsPopover"></FluentButton>
                    </FluentCounterBadge>
                    <FluentButton IconStart="@(new Icons.Regular.Size20.Add())" Appearance="Appearance.Outline"></FluentButton>
                    <FluentProfileMenu Initials="LI4">
                        <HeaderTemplate>
                            <FluentLabel Typo="@Typography.Subject">Welcome,</FluentLabel>
                        </HeaderTemplate>
                        <ChildContent>
                            <div class="min-w-[250px] mb-6">
                                <FluentLabel Typo="@Typography.Header" Style="font-weight: bold;">LabInfo4</FluentLabel>
                                <FluentLabel>labinfo4@uminho.com</FluentLabel>
                            </div>
                        </ChildContent>
                        <FooterTemplate>
                            <FluentStack>
                                <FluentButton id="themePopover" IconStart="@(new Icons.Regular.Size20.PaintBrush())" Appearance="Appearance.Outline" @onclick="() => _visibleThemePopover = !_visibleThemePopover">Theme</FluentButton>
                                <FluentSpacer />
                                <FluentButton IconStart="@(new Icons.Regular.Size20.ArrowExit())" Appearance="Appearance.Outline">Logout</FluentButton>
                            </FluentStack>
                        </FooterTemplate>
                    </FluentProfileMenu>
                </div>
            </div>
        </FluentStack>
        <div class="px-3">
            @RenderMenuOptions
        </div>
    </div>

    <FluentDesignTheme StorageName="theme" @bind-Mode="@Mode" @bind-OfficeColor="@OfficeColor" />
    <FluentPopover class="rounded-md w-80" VerticalThreshold="170" AnchorId="themePopover" @bind-Open="_visibleThemePopover">
        <Header>@(new Emojis.Objects.Color.Default.Paintbrush().ToMarkup("20px")) Customize your experience</Header>
        <Body>
            <FluentGrid>
                <FluentGridItem>
                    <FluentSelect class="w-full" Label="Theme" Items="@(Enum.GetValues<DesignThemeModes>())" Width="250px" @bind-SelectedOption="@Mode" />
                </FluentGridItem>
                <FluentGridItem>
                    <FluentSelect class="w-full" Label="Color" Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))" Height="200px" Width="250px" @bind-SelectedOption="@OfficeColor">
                        <OptionTemplate>
                            <FluentStack>
                                <FluentLabel>@context</FluentLabel>  
                            </FluentStack>
                        </OptionTemplate> 
                    </FluentSelect>
                </FluentGridItem>
            </FluentGrid>
        </Body>
    </FluentPopover>

    <FluentPopover class="rounded-md w-80" VerticalThreshold="170" AnchorId="notificationsPopover" @bind-Open="_visibleNotificationsPopover">
        <Header>@(new Emojis.Objects.Color.Default.OutboxTray().ToMarkup("20px")) Orders</Header>
        <Body>
            <span>Popover</span>
        </Body>
        <Footer>
            <FluentButton class="w-full" Appearance="Appearance.Lightweight">View all</FluentButton>
        </Footer>
    </FluentPopover>
</div>
@code {
    bool _visibleThemePopover;
    bool _visibleNotificationsPopover;
    public DesignThemeModes Mode { get; set; }
    public OfficeColor? OfficeColor { get; set; }

    public class PageMetadata
    {
        public required string Path { get; set; }
        public required string Title { get; set; }
        public required Microsoft.FluentUI.AspNetCore.Components.Icon Icon { get; set; }
    }

    private List<PageMetadata> pagesmetadata = new List<PageMetadata>
    {
        new PageMetadata { Path = "/", Title = "Dashboard", Icon = new Icons.Regular.Size20.Home() },
        new PageMetadata { Path = "/shop", Title = "Parts Shop", Icon = new Icons.Regular.Size20.Cart() },
        new PageMetadata { Path = "/inventory", Title = "Inventory", Icon = new Icons.Regular.Size20.Box() },
        new PageMetadata { Path = "/assembly", Title = "Assembly", Icon = new Icons.Regular.Size20.Wrench() }
    };

    private RenderFragment RenderMenuOptions => @<FluentStack Orientation="Orientation.Horizontal" Width="100%">
        @foreach (var pagemetadata in pagesmetadata)
        {
            <NavLink class="w-full" href="@pagemetadata.Path" Match="NavLinkMatch.All">
                <FluentButton class="w-full hidden sm:inline-flex font-medium text-lg" IconStart="@pagemetadata.Icon" Appearance="Appearance.Lightweight">@pagemetadata.Title</FluentButton>
                <FluentButton class="w-full inline-flex sm:hidden font-medium text-lg" IconStart="@pagemetadata.Icon" Appearance="Appearance.Lightweight"></FluentButton>
            </NavLink>
        }
    </FluentStack>;

    private string? CurrentPageTitle { get; set; }

    protected override void OnInitialized() // When component is loaded
    {
        base.OnInitialized();
        SetPageTitle();
        Navigation.LocationChanged += (sender, args) => SetPageTitle();  // Listen for navigation changes
    }

    private void SetPageTitle() {
        var uri = Navigation.Uri;
        var page = pagesmetadata.FirstOrDefault(p => uri.EndsWith(p.Path));
        CurrentPageTitle = page?.Title ?? pagesmetadata[0].Title; // Default to "Dashboard" if no match found
        StateHasChanged(); // Trigger UI update
    }
}

<style scoped>
.nav {
    background-color:rgb(36, 35, 35);
    z-index: 50;
}
</style>