@page "/"
@attribute [Authorize(Roles = "Admin, User")]
@attribute [AllowAnonymous]
@attribute [StreamRendering]
@rendermode InteractiveServer
<PageTitle>PCMount - Shop</PageTitle>
<FluentDialogProvider />

@inject IDialogService DialogService
@inject ComponentesService ComponentesDb
@inject ComputersService ComputersDb
@inject OrdersService OrdersDb

<FluentToolbar class="p-4 sticky top-0 z-10 shadow-md">
    <NavLink href="/" Match="NavLinkMatch.All" class="hidden md:flex">
        <img src="/assets/pcmountlogo.png" Slot="start" width="45px"/>
    </NavLink>
    <FluentButton class="text-lg" IconStart="@(new Icons.Regular.Size16.Add())" Appearance="Appearance.Lightweight" @onclick="@OpenDialogAsync">Order Custom Build</FluentButton>
    <FluentSpacer />
    <FluentSearch Placeholder="Search for Product" Class="w-1/3 hidden md:block text-lg" @bind-Value="@searchTerm" @bind-Value:after="@OnSearchInput" Immediate="true" />
    <div class="relative">
            <FluentButton class="text-lg" IconStart="@(new Icons.Regular.Size16.Filter())" slot="trigger" Appearance="Appearance.Neutral" text="Order by" @onclick="() => toggleOptions()">Order by</FluentButton>
            @if (optionsDropDown) {
                <div class="absolute z-30 posfilter flex flex-col justify-center items-center rounded-l slide-down">
                    <FluentButton class="w-44 text-lg" IconStart="@(new Icons.Regular.Size16.ArrowSortUp())" @onclick="() => SortProducts(1)">
                        Highest Price
                    </FluentButton>
                    <FluentButton class="w-44 text-lg" IconStart="@(new Icons.Regular.Size16.ArrowSortDown())" @onclick="() => SortProducts(2)">
                        Lowest Price
                    </FluentButton>
                </div>
            }
        </div>
    <FluentSpacer />
    <FluentCounterBadge Count="@cart?.Count" Appearance="Appearance.Accent">
        <FluentButton id="notificationsPopover" IconStart="@(new Icons.Regular.Size24.Cart())" @onclick="() => _visibleNotificationsPopover = !_visibleNotificationsPopover"></FluentButton>
    </FluentCounterBadge>
    <AuthorizeView>
        <NotAuthorized>
            <NavLink href="/login" Match="NavLinkMatch.All">
                <FluentButton class="text-lg" IconStart="@(new Icons.Regular.Size24.Person())" Appearance="Appearance.Accent">Login</FluentButton>
            </NavLink>
        </NotAuthorized>
        <Authorized>
            <NavLink href="/dashboard" Match="NavLinkMatch.All">
                <FluentButton class="text-lg" IconStart="@(new Icons.Regular.Size24.Board())" Appearance="Appearance.Lightweight">Dashboard</FluentButton>
            </NavLink>
        </Authorized>
    </AuthorizeView>
</FluentToolbar>
<div class="p-5">
    @if (computers == null) {
        <LoadingDialog Title="Waiting page data request" />
        <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 2xl:grid-cols-7 gap-5">
            @foreach(int element in Enumerable.Range(1, 14)) {
                <FluentSkeleton Width="100%" Height="340px"></FluentSkeleton>
            }
        </div>
    } else {
        @if (filteredProducts != null && !filteredProducts.Any()) {
            <div class="flex items-center justify-center h-96">
                <span class="text-2xl text-gray-400">No products found.</span>
            </div>
        } else {
            <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
                @foreach (var product in filteredProducts!) {
                    <div class="relative custom-transition transition duration-300 ease-in-out">
                        <ProductCard Product="@product" OnAddToCart="AddToCart" />
                    </div>
                }
            </div>
        }
    }
</div>

<FluentPopover class="rounded-md w-80" VerticalThreshold="170" AnchorId="notificationsPopover" @bind-Open="_visibleNotificationsPopover">
    <Header>@(new Emojis.Objects.Color.Default.ShoppingCart().ToMarkup("20px")) Cart</Header>
    <Body>
        @if (cart == null || cart.Count == 0) {
            <span class="flex items-center gap-2 text-lg">@(new Emojis.Symbols.Color.Default.Warning().ToMarkup("20px")) Cart is empty.</span>
        } else {
            <div class="flex flex-col gap-2 p-4 max-h-96 overflow-auto">
            @foreach (var product in cart) {
                <div class="flex justify-between items-center gap-2">
                    <div class="flex gap-2 items-center">
                        <img src="@product.Image" class="w-12 h-12 rounded-md" />
                        <div class="flex flex-col gap-1">
                            <span>@product.Name</span>
                            <div class="flex gap-1.5 items-center">
                                <FluentBadge Fill="highlight" BackgroundColor="#166534" Color="white" style="width: fit-content;">$@product.Price</FluentBadge>
                                @if (product.Discount > 0) {
                                    <FluentBadge Fill="highlight" BackgroundColor="#991b1b" Color="white" style="width: fit-content;">-@product.Discount%</FluentBadge>
                                }
                            </div>
                        </div>
                    </div>
                    <FluentButton IconStart="@(new Icons.Regular.Size16.Delete())" Appearance="Appearance.Lightweight" @onclick="() => RemoveFromCart(product)"></FluentButton>
                </div>
            }
            </div>
        }
    </Body>
    <Footer>
        <span><b>Total:</b> @(calculateTotalPrice(cart!).ToString("C"))</span>
        <FluentButton class="w-full" IconStart="@(new Icons.Regular.Size16.ShoppingBag())" Appearance="Appearance.Lightweight" @onclick="OrderCart">Confirm Order</FluentButton>
    </Footer>
</FluentPopover>

@code {
    private bool _visibleNotificationsPopover;
    private bool optionsDropDown = false;
    private Computer[]? computers;
    private List<Computer>? filteredProducts = new List<Computer>();
    private List<Computer>? cart = new List<Computer>();

    protected override async Task OnInitializedAsync() {
        Part[] components = await ComponentesDb.GetArrayAsync() ?? Array.Empty<Part>();
        computers = (await ComputersDb.GetArrayAsync())?.Select(c => {
            c.Motherboard = components.FirstOrDefault(p => p.PartId == c.MotherboardId);
            c.Processor = components.FirstOrDefault(p => p.PartId == c.ProcessorId);
            c.Memory = components.FirstOrDefault(p => p.PartId == c.MemoryId);
            c.GraphicsCard = components.FirstOrDefault(p => p.PartId == c.GraphicsCardId);
            c.Storage = components.FirstOrDefault(p => p.PartId == c.StorageId);
            c.PowerSupply = components.FirstOrDefault(p => p.PartId == c.PowerSupplyId);
            c.Case = components.FirstOrDefault(p => p.PartId == c.CaseId);
            return c;
        }).ToArray() ?? Array.Empty<Computer>();
        DefaultSearchProducts();
    }

    private void AddToCart(Computer product) {
        cart!.Add(product);
    }

    private void RemoveFromCart(Computer product) {
        cart!.Remove(product);
    }

    private double calculateTotalPrice(List<Computer> cart) {
        double total = 0;
        foreach (var product in cart) {
            total += product.Price - (product.Price * (product.Discount ?? 0) / 100);
        }
        return total;
    }

    private async Task OrderCart() {
        foreach (var product in cart!) {
            Order order = new() {
                Status = OrderStatus.Pending,
                Name = product.Name,
                Price = product.Price,
                Discount = product.Discount ?? 0,
                Image = product.Image,
                MotherboardId = product.MotherboardId,
                ProcessorId = product.ProcessorId,
                MemoryId = product.MemoryId,
                GraphicsCardId = product.GraphicsCardId,
                StorageId = product.StorageId,
                PowerSupplyId = product.PowerSupplyId,
                CaseId = product.CaseId
            };
            await OrdersDb.CreateAsync(order);
        }
        cart!.Clear();
    }

    private void DefaultSearchProducts() {
        filteredProducts = computers?.ToList();
    }

    private string searchTerm = string.Empty;
    private void OnSearchInput() {
        if (string.IsNullOrWhiteSpace(searchTerm)) {
            DefaultSearchProducts();
            searchTerm = string.Empty;
        } else {
            filteredProducts = computers?.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
        StateHasChanged();
    }

    private Computer? customBuild { get; set; } = null;
    private async Task OpenDialogAsync() {
        DialogParameters parameters = new() {
            Title = "Create Your Own Custom Build",
            TrapFocus = true,
            Modal = true,
            PreventScroll = true 
        };
        IDialogReference dialog = await DialogService.ShowDialogAsync<CustomBuildDialog>(customBuild!, parameters);
        DialogResult? result = await dialog.Result;
        if (result.Data is not null) {
            Computer? customBuild = result.Data as Computer;
            if (customBuild != null) {
                AddToCart(customBuild);
            }
        }
    }

    private double getPriceDiscount(double price, double? discount) {
        if (discount == null || discount == 0) return price;
        return price - price * discount.Value * 0.01;
    }

    private void toggleOptions() {
        optionsDropDown = !optionsDropDown;
    }

    private void SortProducts(int filter) {
        switch (filter) {
            case 1: // Highest Price
                filteredProducts = filteredProducts!.OrderByDescending(p => getPriceDiscount(p.Price, p.Discount)).ToList();
                toggleOptions();
                break;
            case 2: // Lowest Price
                filteredProducts = filteredProducts!.OrderBy(p => getPriceDiscount(p.Price, p.Discount)).ToList();
                toggleOptions();
                break;
            default: 
                toggleOptions();
                break;
        }
        StateHasChanged();
    }
}

<style scoped>
.custom-transition:hover {
    transform: scale(1.05); 
}
</style>