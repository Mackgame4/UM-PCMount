@page "/dashboard/assembly"
@attribute [Authorize(Roles = "Admin")]
@layout DashboardLayout
@rendermode InteractiveServer
@inject OrdersService OrdersDb
<PageTitle>PCMount - Assembly</PageTitle>

 @if (OrdersList == null)
{
    <div class="w-full flex items-center justify-center">
        <p class="text-xl">
            Loading orders...
        </p>
    </div>
}
else if (!OrdersList.Any())
{   
    <div class="w-full flex items-center justify-center">
        <p class="text-xl">
            No orders found.
        </p>
    </div>
}
else
{
    <FluentWizard StepperPosition="StepperPosition.Top" StepSequence="WizardStepSequence.Any" DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)" StepTitleHiddenWhen="@GridItemHidden.XsAndDown" OnFinish="@OnFinishedAsync">
        <Steps>
            <FluentWizardStep Label="Select Order" OnChange="@OnStepChange">
            <div class="order-grid mx-auto">
                    <div class="grid grid-cols-5 gap-6">
                        @foreach (var order in OrdersList)
                        {
                            <FluentCard MinimalStyle="true" class="relative flex flex-col justify-center items-center text-center gap-2 hover:translate-y-2" @onclick="() => SelectOrder(order)">
                                <FluentBadge>
                                    <span class="font-medium">
                                        @order.Status.ToString() Order ID: @order.OrderId
                                    </span>
                                </FluentBadge>
                                <div class="h-40 rounded-md">
                                    <img src="@order.Image" class="object-cover w-full h-full rounded-md" />
                                </div>
                                <h3 class= "h-14">
                                    @order.Name
                                </h3>
                                <div class="flex flex-row gap-2 justify-center items-center text-center text-xl">
                                    <span>
                                        Ordered for:
                                    </span>
                                    <FluentBadge Appearance="Appearance.Neutral" class="text-lg mt-1">
                                        <span class="text-green-500">
                                            @order.Price€
                                        </span>
                                    </FluentBadge>
                                </div>
                                <FluentButton IconStart="@(new Icons.Regular.Size24.PuzzlePiece())" Appearance="Appearance.Accent" class="mt-4 w-3/4"></FluentButton>
                                <FluentButton IconStart="@(new Icons.Regular.Size24.Wrench())" Appearance="Appearance.Accent" class="w-3/4"></FluentButton>
                            </FluentCard>
                        }
                    </div>
                }
            </div>

            <div class="pagination w-full flex items-center justify-center py-4 gap-3">
                <FluentButton @onclick="@PreviousPage" disabled="@IsFirstPage" class="text-lg font-medium">
                    Previous
                </FluentButton>
                <span class="text-lg">
                    @CurrentPage / @TotalPages
                </span>
                <FluentButton @onclick="@NextPage" disabled="@IsLastPage" class="text-lg font-medium">
                    Next
                </FluentButton>
            </div>
    </FluentWizardStep>
            <FluentWizardStep Label="Get started" Summary="Begin the tasks" OnChange="@OnStepChange">
                Maecenas sed justo ac sapien venenatis ullamcorper. Sed maximus nunc non venenatis euismod.
                Fusce vel porta ex, imperdiet molestie nisl. Vestibulum eu ultricies mauris, eget aliquam quam.
            </FluentWizardStep>
            <FluentWizardStep Disabled="true" Label="Disabled step" Summary="This step is disabled" OnChange="@OnStepChange">
                Nunc dignissim tortor eget lacus porta tristique. Nunc in posuere dui. Cras ligula ex,
                ullamcorper in gravida in, euismod vitae purus. Lorem ipsum dolor sit amet, consectetur
                adipiscing elit. Aliquam at velit leo. Suspendisse potenti. Cras dictum eu augue in laoreet.
            </FluentWizardStep>
            <FluentWizardStep Label="Set budget" Summary="Identify the best price" IconPrevious="@(new Icons.Filled.Size24.Star())" IconCurrent="@(new Icons.Filled.Size24.StarEmphasis())" IconNext="@(new Icons.Regular.Size24.Star())" DisplayStepNumber="false" OnChange="@OnStepChange">
                Phasellus quis augue convallis, congue velit ac, aliquam ex. In egestas porttitor massa
                aliquet porttitor. Donec bibendum faucibus urna vitae elementum. Phasellus vitae efficitur
                turpis, eget molestie ipsum.
            </FluentWizardStep>
            <FluentWizardStep Label="Summary" OnChange="@OnStepChange">
                Ut iaculis sed magna efficitur tempor. Vestibulum est erat, imperdiet in diam ac,
                aliquam tempus sapien. Nam rutrum mi at enim mattis, non mollis diam molestie.
                Cras sodales dui libero, sit amet cursus sapien elementum ac. Nulla euismod nisi sem.
            </FluentWizardStep>
        </Steps>
    </FluentWizard>
}

@if (checkingParts == true)
    {
        <FluentDialog>
            <FluentDialogHeader>
                <h1 class="font-bold text-xl text-center relative">
                    @activeOrder.Name | Order ID: @activeOrder.OrderId
                </h1>
                <h1 class="font-bold text-xl text-center relative">
                    Build Requirements
                </h1>
            </FluentDialogHeader>
            <FluentDialogBody>
                <div class="grid grid-cols-3 w-full gap-4">
                    @foreach (Part part in activePartsList)
                    {
                        <div class="flex flex-col items-center justify-center  gap-2">
                            <FluentBadge>
                                @part?.Name
                            </FluentBadge>
                            <img src="@part?.Image" class="object-cover h-20" />
                        </div>
                    }
                </div>
            </FluentDialogBody>
            <FluentDialogFooter class=" absolute flex items-center justify-center top-5 right-5">
                <FluentButton class="font-bold text-lg text-gray-300" @onclick="() => togglePartsList()">
                    Cancel
                </FluentButton>
            </FluentDialogFooter>
        </FluentDialog>
    }

@code {
    private List<Order>? OrdersList { get; set; }
    private List<Part>? activePartsList {get; set; }
    private Order activeOrder {get; set; }
    private bool checkingParts = false;
    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private int TotalPages { get; set; }
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private void togglePartsList() {
        checkingParts = !checkingParts;
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }
    
    private async Task LoadOrdersAsync()
    {
        Order[]? orders = await OrdersDb.GetArrayAsync();
        TotalPages = (int)Math.Ceiling(orders.Length / (double)PageSize);
        OrdersList = orders.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();
    }

    private async void getParts(Order order) {
        activeOrder = order;
        await LoadPartsOfOrder(order);
        togglePartsList();
    }

    private async Task LoadPartsOfOrder(Order order) {
        activePartsList = await OrdersDb.GetPartsForOrderAsync(order);
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            await LoadOrdersAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            await LoadOrdersAsync();
        }
    }

    private void SelectOrder(Order order)
    {
        Console.WriteLine($"Selected order: {order.OrderId}");
        // Add logic to proceed to the next wizard step with the selected order
    }

    private void OnStepChange(FluentWizardStepChangeEventArgs e) {
        Console.WriteLine($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
    }

    private void OnFinishedAsync() {
        Console.WriteLine("Wizard finished");
    }
}
