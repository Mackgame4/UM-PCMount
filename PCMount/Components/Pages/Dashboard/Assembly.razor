@page "/dashboard/assembly"
@attribute [Authorize(Roles = "Admin")]
@layout DashboardLayout
@rendermode InteractiveServer
@inject OrdersService OrdersDb
<PageTitle>PCMount - Assembly</PageTitle>

 @if (OrdersList == null)
{
    <div class="w-full flex items-center justify-center">
        <p class="text-xl">
            Loading orders...
        </p>
    </div>
}
else if (!OrdersList.Any())
{   
    <div class="w-full flex items-center justify-center">
        <p class="text-xl">
            No orders found.
        </p>
    </div>
}
else
{
    <FluentWizard StepperPosition="StepperPosition.Top" StepSequence="WizardStepSequence.Any" DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)" StepTitleHiddenWhen="@GridItemHidden.XsAndDown" OnFinish="@OnFinishedAsync">
        <Steps>
            <FluentWizardStep Label="Select Order" OnChange="@OnStepChange">
            <div class="order-grid mx-auto">
                    <div class="grid grid-cols-5 gap-6">
                        @foreach (var order in OrdersList.Select((Order order, int index) => new { order, index }))
                        {
                            <FluentCard MinimalStyle="true" class="relative flex flex-col justify-center items-center text-center gap-2 hover:translate-y-2" @onclick="() => SelectOrder(order.order)">
                                <FluentBadge>
                                    <span class="font-medium">
                                        @order.order.Status.ToString() Order ID: @order.order.OrderId
                                    </span>
                                </FluentBadge>
                                <div class="h-40 rounded-md">
                                    <img src="@order.order.Image" class="object-cover w-full h-full rounded-md" />
                                </div>
                                <h3 class= "h-14">
                                    @order.order.Name
                                </h3>
                                <div class="flex flex-row gap-2 justify-center items-center text-center text-xl">
                                    <span>
                                        Ordered for:
                                    </span>
                                    <FluentBadge Appearance="Appearance.Neutral" class="text-lg mt-1">
                                        <span class="text-green-500">
                                            @order.order.Price€
                                        </span>
                                    </FluentBadge>
                                </div>
                                <FluentButton IconStart="@(new Icons.Regular.Size24.PuzzlePiece())" Appearance="Appearance.Accent" class="mt-4 w-3/4" @onclick="() => getParts(order.order)"></FluentButton>
                                <FluentButton IconStart="@(new Icons.Regular.Size24.Wrench())" Appearance="Appearance.Accent" class="w-3/4" @onclick="() => checkStartability(order.order, order.index)"></FluentButton>
                                @if (OrderStartability.TryGetValue(order.index, out bool cannotStart) && cannotStart)
                                {
                                    <p class="text-red-500 text-sm h-6">
                                        There is not enough parts to start Assemblying!
                                    </p>
                                } else {
                                    <div class="h-6"></div>
                                }
                            </FluentCard>
                        }
                    </div>
                }
            </div>

            <div class="pagination w-full flex items-center justify-center py-4 gap-3">
                <FluentButton @onclick="@PreviousPage" disabled="@IsFirstPage" class="text-lg font-medium">
                    Previous
                </FluentButton>
                <span class="text-lg">
                    @CurrentPage / @TotalPages
                </span>
                <FluentButton @onclick="@NextPage" disabled="@IsLastPage" class="text-lg font-medium">
                    Next
                </FluentButton>
            </div>
    </FluentWizardStep>
            <FluentWizardStep Label="Get started" Summary="Begin the tasks" OnChange="@OnStepChange">
                Maecenas sed justo ac sapien venenatis ullamcorper. Sed maximus nunc non venenatis euismod.
                Fusce vel porta ex, imperdiet molestie nisl. Vestibulum eu ultricies mauris, eget aliquam quam.
            </FluentWizardStep>
            <FluentWizardStep Disabled="true" Label="Disabled step" Summary="This step is disabled" OnChange="@OnStepChange">
                Nunc dignissim tortor eget lacus porta tristique. Nunc in posuere dui. Cras ligula ex,
                ullamcorper in gravida in, euismod vitae purus. Lorem ipsum dolor sit amet, consectetur
                adipiscing elit. Aliquam at velit leo. Suspendisse potenti. Cras dictum eu augue in laoreet.
            </FluentWizardStep>
            <FluentWizardStep Label="Set budget" Summary="Identify the best price" IconPrevious="@(new Icons.Filled.Size24.Star())" IconCurrent="@(new Icons.Filled.Size24.StarEmphasis())" IconNext="@(new Icons.Regular.Size24.Star())" DisplayStepNumber="false" OnChange="@OnStepChange">
                Phasellus quis augue convallis, congue velit ac, aliquam ex. In egestas porttitor massa
                aliquet porttitor. Donec bibendum faucibus urna vitae elementum. Phasellus vitae efficitur
                turpis, eget molestie ipsum.
            </FluentWizardStep>
            <FluentWizardStep Label="Summary" OnChange="@OnStepChange">
                Ut iaculis sed magna efficitur tempor. Vestibulum est erat, imperdiet in diam ac,
                aliquam tempus sapien. Nam rutrum mi at enim mattis, non mollis diam molestie.
                Cras sodales dui libero, sit amet cursus sapien elementum ac. Nulla euismod nisi sem.
            </FluentWizardStep>
        </Steps>
    </FluentWizard>
}

@if (checkingParts == true && activePartsList != null)
{
    <FluentDialog class="relative">
        <FluentDialogHeader>
            <h1 class="font-bold text-xl text-center">
                @activeOrder?.Name | Order ID: @activeOrder?.OrderId
            </h1>
            <h1 class="font-bold text-xl text-center">
                Build Requirements
            </h1>
            <FluentButton class="absolute top-5 right-5 font-bold text-lg text-gray-300" @onclick="() => togglePartsList()">
                X
            </FluentButton>
        </FluentDialogHeader>
        <FluentDialogBody>
            <div class="grid grid-cols-3 w-full gap-4">
                @foreach (var (part, quantity) in activePartsList)
                {
                    <div class="flex flex-col items-center justify-between text-center gap-2">
                        <h3 class="text-lg @(quantity == 0 ? "text-red-500" : "")">
                            @part?.Name
                        </h3>
                        <img src="@part?.Image" class="object-cover h-20" />
                        <FluentBadge class="text-sm"><span class="font-bold @(quantity == 0 ? "text-red-500" : "")">In Stock: @quantity</span></FluentBadge>
                    </div>
                }
            </div>
        </FluentDialogBody>
    </FluentDialog>
}


@code {
    private List<Order>? OrdersList { get; set; }
    private List<(Part Part, int Quantity)>? activePartsList { get; set; }
    private Order? activeOrder {get; set; }
    private bool checkingParts = false;
    private Dictionary<int, bool> OrderStartability { get; set; } = new();

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 5;
    private int TotalPages { get; set; }
    private bool IsFirstPage => CurrentPage == 1;
    private bool IsLastPage => CurrentPage == TotalPages;

    private void togglePartsList() {
        checkingParts = !checkingParts;
        if (!checkingParts) activePartsList = null;
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }
    
    private async Task LoadOrdersAsync()
    {
        OrderStartability.Clear();

        Order[]? orders = await OrdersDb.GetArrayAsync();
        TotalPages = (int)Math.Ceiling(orders.Length / (double)PageSize);
        OrdersList = orders.Skip((CurrentPage - 1) * PageSize).Take(PageSize).ToList();

        // Initialize the dictionary for displayed orders
        for (int i = 0; i < OrdersList.Count; i++)
        {
            OrderStartability[i] = false; // Default value, no checks yet
        }
    }

    private async Task getParts(Order order)
    {
        activeOrder = order;

        // Load parts and wait for completion
        await LoadPartsOfOrder(order);

        // Ensure state updates after parts are loaded
        checkingParts = true;
        StateHasChanged(); // Notify Blazor to refresh UI
    }

    private async Task checkStartability(Order order, int index)
    {
        activeOrder = order;

        // Load parts for the order
        await LoadPartsOfOrder(order);

        // Determine if the order can start
        bool hasOutOfStockParts = HasOutOfStockParts();

        // Update the dictionary for the order at this index
        OrderStartability[index] = hasOutOfStockParts;

        StateHasChanged(); // Notify Blazor to refresh UI
    }


    private bool HasOutOfStockParts()
    {
        return activePartsList?.Any(p => p.Quantity == 0) ?? false;
    }

    private async Task LoadPartsOfOrder(Order order) {
        activePartsList = await OrdersDb.GetPartsForOrderAsync(order);
    }

    private async Task NextPage()
    {
        if (!IsLastPage)
        {
            CurrentPage++;
            await LoadOrdersAsync();
        }
    }

    private async Task PreviousPage()
    {
        if (!IsFirstPage)
        {
            CurrentPage--;
            await LoadOrdersAsync();
        }
    }

    private void SelectOrder(Order order)
    {
        Console.WriteLine($"Selected order: {order.OrderId}");
        // Add logic to proceed to the next wizard step with the selected order
    }

    private void OnStepChange(FluentWizardStepChangeEventArgs e) {
        Console.WriteLine($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
    }

    private void OnFinishedAsync() {
        Console.WriteLine("Wizard finished");
    }
}
