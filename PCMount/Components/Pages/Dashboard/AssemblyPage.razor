@page "/dashboard/assembly/{Id:int}"
@attribute [Authorize(Roles = "Admin")]
@layout DashboardLayout
@rendermode InteractiveServer
<PageTitle>PCMount - Assembly</PageTitle>

@inject OrdersService OrdersDb
@inject ComponentesService ComponentesDb
@inject InventarioService InventarioDb
@inject NavigationManager Navigation

@if (Id <= 0) {
    <span class="text-center text-xl text-gray-200 mt-8">Invalid Assembly ID.</span>
} else {
    if (order == null) {
        <span class="text-center text-xl text-gray-200 mt-8">No order found with the ID @Id to be assembled.</span>
    } else {
        <div class="relative w-full h-screen-space -mt-4">
            <FluentBadge Appearance="Appearance.Accent" Class="text-md md:text-xl p-2"><span class="flex flex-row justify-center items-center gap-1"><FluentIcon Color="Color.Fill" Value="@(new Icons.Regular.Size20.Wrench())" />You're Assemblying An <b>@order?.Name</b> In Order Id:<b>@Id</b></span></FluentBadge>
            <FluentWizard Class="min-h-full h-full" StepperPosition="StepperPosition.Left" StepSequence="WizardStepSequence.Any" DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)" StepTitleHiddenWhen="@GridItemHidden.XsAndDown" OnFinish="@OnFinishedAsync">
                <Steps>
                    <FluentWizardStep Label="Overview" OnChange="@OnStepChange">
                        <div class="flex flex-row justify-center items-center gap-4 p-8">
                            <div class="w-1/3 flex flex-col justify-center items-center relative">
                                <ColorImage imageUrl="@imageUrl" />
                            </div>
                            <div class="w-2/3 flex flex-col justify-center items-center gap-4">
                                <div class="grid grid-cols-3 grid-rows-6 gap-4 p-8" style="border: 1px solid transparent;">
                                    @for (int i = 0; i <= 7; i++) {
                                        int currentStep = i; 
                                        <div class="p-4 flex justify-center items-center relative" 
                                            style="border: 1px solid @(IsStepCompleted(i) ? "green" : "red");" 
                                            @onmouseover="@(e => hoveringItem(currentStep))">
                                            @GetStepLabel(i)
                                            @if (IsStepCompleted(i)) {
                                                <span class="absolute top-0 right-1 text-green-500">✔️</span>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    </FluentWizardStep>
                    @foreach (var step in steps!) {
                        <FluentWizardStep Label="@step.Label" Disabled="!step.IsCompleted" OnChange="@OnStepChange">
                            <AssemblyStep OnComplete="@stepDone" OnUncomplete="@stepUnDone" OnStepNumberChanged="@stepStarted" StepNumber="@step.StepNumber" PartsList="@step.AvaliableParts" PartToAssemble="@step.PartToAssemble" />
                        </FluentWizardStep>
                    }
                    <FluentWizardStep Label="Finalize" Disabled=@(!Finalize) OnChange="@OnStepChange">
                        <div class="flex flex-row justify-center items-center gap-4 p-8">
                            <div class="w-4/5 flex flex-col justify-center items-center relative">
                            <div class="flex">
                                <div class="flex flex-col w-1/2 gap-2 justify-center">
                                    @if (partsWithQuantities != null) {
                                        @foreach (var (part, quantity) in partsWithQuantities) {
                                            <p class="text-lg">@part.Tipo: <FluentBadge class="text-lg font-medium">@part.Name</FluentBadge> ✔️</p>
                                        }
                                    }
                                </div>
                                <img class="w-1/2" src=@order?.Image alt="Final Order Image">
                            </div>
                                <FluentButton IconStart="@(new Icons.Regular.Size24.Box())" Appearance="Appearance.Accent" @onclick="() => OrderDone()" class="text-2xl font-light mt-8">
                                    MARK ORDER ID: <span class="font-medium">@order?.OrderId</span> AS DONE
                                </FluentButton>
                            </div>
                        </div>
                    </FluentWizardStep>
                </Steps>
            </FluentWizard>
        </div>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Order? order;
    private List<(Part Part, int Quantity)>? partsWithQuantities;
    private bool Finalize = false;
    public class Steps {
        public int StepNumber {get; set; }
        public string? Label { get; set; }
        public bool IsCompleted { get; set; }
        public List<Part>? AvaliableParts { get; set; }
        public Part? PartToAssemble { get; set; }
    }

    private List<Steps>? steps;

    protected override async Task OnParametersSetAsync() {
        // Invalid ID
        if (Id <= 0) {
            order = null;
            return;
        } else {
            order = await OrdersDb.FindOneAsync(o => o.OrderId == Id); // Fetch the order using FindOneAsync
            if (order != null) {
                partsWithQuantities = await OrdersDb.GetPartsForOrderAsync(order);
                steps = new List<Steps> {
                    new Steps { StepNumber = 0, Label = "Prepare Case", IsCompleted = true, AvaliableParts = (await ComponentesDb.GetPartsByTypeAsync(PartTipo.Case)), PartToAssemble = getPartByType(PartTipo.Case) },
                    new Steps { StepNumber = 1, Label = "Place Power Supply", IsCompleted = false, AvaliableParts = (await ComponentesDb.GetPartsByTypeAsync(PartTipo.PowerSupply)), PartToAssemble = getPartByType(PartTipo.PowerSupply) },
                    new Steps { StepNumber = 2, Label = "Install Motherboard", IsCompleted = false, AvaliableParts = (await ComponentesDb.GetPartsByTypeAsync(PartTipo.Motherboard)), PartToAssemble = getPartByType(PartTipo.Motherboard) },
                    new Steps { StepNumber = 3, Label = "Install CPU", IsCompleted = false, AvaliableParts = (await ComponentesDb.GetPartsByTypeAsync(PartTipo.Processor)), PartToAssemble = getPartByType(PartTipo.Processor) },
                    new Steps { StepNumber = 4, Label = "Install RAM", IsCompleted = false, AvaliableParts = (await ComponentesDb.GetPartsByTypeAsync(PartTipo.Memory)), PartToAssemble = getPartByType(PartTipo.Memory) },
                    new Steps { StepNumber = 5, Label = "Install GPU", IsCompleted = false, AvaliableParts = (await ComponentesDb.GetPartsByTypeAsync(PartTipo.GraphicsCard)), PartToAssemble = getPartByType(PartTipo.GraphicsCard) },
                    new Steps { StepNumber = 6, Label = "Install Storage", IsCompleted = false, AvaliableParts = (await ComponentesDb.GetPartsByTypeAsync(PartTipo.Storage)), PartToAssemble = getPartByType(PartTipo.Storage) },
                    //new Steps { StepNumber = 7, Label = "Install Cooling", IsCompleted = false, AvaliableParts = (await ComponentesDb.GetPartsByTypeAsync(PartTipo.Storage)), PartToAssemble = getPartByType(PartTipo.Storage) },
                };
            }
        }
    }

    private async void OrderDone() {
        if (partsWithQuantities == null) {
            Console.WriteLine("No parts found to update.");
            return;
        }

        foreach (var (part, quantity) in partsWithQuantities) {
            try {
                int newQuantidade = quantity - 1;

                if (newQuantidade < 0) {
                    Console.WriteLine($"Cannot update PartId: {part.PartId}. Quantity would become negative.");
                    continue;
                }
                var updatedInventario = await InventarioDb.UpdateAsync2(part.PartId, newQuantidade);

                if (updatedInventario == null) {
                    Console.WriteLine($"Failed to update PartId: {part.PartId}");
                } else {
                    Console.WriteLine($"Updated PartId: {part.PartId}. New Quantity: {updatedInventario.Quantidade}");
                }
            } catch (Exception ex) {
                Console.WriteLine($"An error occurred while updating PartId: {part.PartId}. Error: {ex.Message}");
            }
        }

        if (order != null) {
            await OrdersDb.UpdateOrderStatusToDoneAsync(order.OrderId);
        }
        Navigation.NavigateTo("/dashboard/assembly", true);
    }
    private Part? getPartByType(PartTipo type)
    {
        if (partsWithQuantities == null) {
            return null; 
        }
        var match = partsWithQuantities.FirstOrDefault(p => p.Part.Tipo == type);
        return match.Part;
    }

    private void OnStepChange(FluentWizardStepChangeEventArgs e) {
        Console.WriteLine($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
    }

    private void OnFinishedAsync() {
        Console.WriteLine("Finished wizard");
    }
    private void stepDone(int StepNumber) {
        Console.WriteLine("can advance to the next step");
        if (steps != null && StepNumber < steps.Count - 1) {
            steps[StepNumber + 1].IsCompleted = true;
        }


        if (steps != null && StepNumber == steps.Count - 1) {
            Finalize = true;
        }

        StateHasChanged(); // Refresh the UI
    }

    private void stepUnDone(int StepNumber) {
        Console.WriteLine("Reverting the last completed step");
        if (steps != null && StepNumber < steps.Count - 1) {
            steps[StepNumber + 1].IsCompleted = false;
            if (StepNumber == steps.Count - 1) {
                Finalize = false;
            }
        }

        StateHasChanged(); // Refresh the UI
    }

    private void stepStarted(int StepNumber) {
        if (steps != null && StepNumber != 0) {
            steps[StepNumber - 1].IsCompleted = false;
            Console.WriteLine($"Step '{steps[StepNumber - 1].Label}' marked as not completed.");
        }

        StateHasChanged(); // Refresh the UI
    }

    private int trulyCompletedIndex() {
    if (steps == null) {
        return -1; // Return -1 if the steps list is null
    }

    for (int i = steps.Count - 1; i >= 0; i--) {
        if (steps[i].IsCompleted) {
            return i; // Return the highest index where IsCompleted is true
        }
    }

    return -1;
    }

    private bool IsStepCompleted(int stepNumber) {
        int completedIndex = trulyCompletedIndex();
        if (Finalize) return true;
        return completedIndex > stepNumber;
    }

    private string GetStepLabel(int stepNumber) {
        return stepNumber switch {
            3 => "CPU",
            7 => "CPU Cooler",
            2 => "Motherboard",
            4 => "Memory",
            5 => "Graphics Card",
            6 => "Storage",
            1 => "Power Supply",
            0 => "Case",
            _ => "Unknown"
        };
    }

    private string imageUrl { get; set; } = "/assets/pcbuild-step-0.png";

    private void hoveringItem(int item) {
         Console.WriteLine($"Hovering over item: {item}"); // Debugging
        switch (item) {
            case 3:
                imageUrl = "/assets/pcbuild-step-1.png";
                break;
            case 7:
                imageUrl = "/assets/pcbuild-step-2.png";
                break;
            case 2:
                imageUrl = "/assets/pcbuild-step-3.png";
                break;
            case 4:
                imageUrl = "/assets/pcbuild-step-4.png";
                break;
            case 5:
                imageUrl = "/assets/pcbuild-step-5.png";
                break;
            case 6:
                imageUrl = "/assets/pcbuild-step-6.png";
                break;
            case 1:
                imageUrl = "/assets/pcbuild-step-7.png";
                break;
            case 0:
                imageUrl = "/assets/pcbuild-step-8.png";
                break;
            default:
                imageUrl = "/assets/pcbuild-step-0.png";
                break;
        }
    }
}

<style scoped>
    .h-screen-space {
        /* Calculate the height of the screen without the height of the header */
        height: calc(100vh - 12.0rem);
    }
</style>