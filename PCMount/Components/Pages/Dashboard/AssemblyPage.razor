@page "/dashboard/assembly/{Id:int}"
@attribute [Authorize(Roles = "Admin")]
@layout DashboardLayout
@rendermode InteractiveServer
<PageTitle>PCMount - Assembly</PageTitle>

@inject OrdersService OrdersDb

@if (Id <= 0) {
    <span class="text-center text-xl text-gray-200 mt-8">Invalid Assembly ID.</span>
} else {
    if (order == null) {
        <span class="text-center text-xl text-gray-200 mt-8">No order found with the ID @Id to be assembled.</span>
    } else {
        <div class="relative w-full h-screen-space -mt-4">
            <FluentBadge Appearance="Appearance.Accent" Class="text-md md:text-xl p-2"><span class="flex flex-row justify-center items-center gap-1"><FluentIcon Color="Color.Fill" Value="@(new Icons.Regular.Size20.Wrench())" />You're Assemblying An <b>@order?.Name</b> In Order Id:<b>@Id</b></span></FluentBadge>
            <FluentWizard Class="min-h-full h-full" StepperPosition="StepperPosition.Left" StepSequence="WizardStepSequence.Any" DisplayStepNumber="@(WizardStepStatus.Current | WizardStepStatus.Next)" StepTitleHiddenWhen="@GridItemHidden.XsAndDown" OnFinish="@OnFinishedAsync">
                <Steps>
                    <FluentWizardStep Label="Overview">
                        <div class="flex flex-row justify-center items-center gap-4 p-8">
                            <div class="w-1/3 flex flex-col justify-center items-center relative">
                                <ColorImage imageUrl="@imageUrl" />
                            </div>
                            <div class="w-2/3 flex flex-col justify-center items-center gap-4">
                                <div class="grid grid-cols-3 grid-rows-6 gap-4 p-8" style="border: 1px solid transparent;">
                                    <div class="p-4 flex justify-center items-center" style="border: 1px solid red;" @onmouseover="@(e => hoveringItem(1))" @onclick="@(e => goToStep(1))">CPU</div>
                                    <div class="p-4 flex justify-center items-center" style="border: 1px solid red;" @onmouseover="@(e => hoveringItem(2))">CPU Cooler</div>
                                    <div class="p-4 flex justify-center items-center" style="border: 1px solid red;" @onmouseover="@(e => hoveringItem(3))">Motherboard</div>
                                    <div class="p-4 flex justify-center items-center" style="border: 1px solid red;" @onmouseover="@(e => hoveringItem(4))">Memory</div>
                                    <div class="p-4 flex justify-center items-center" style="border: 1px solid red;" @onmouseover="@(e => hoveringItem(5))">Graphics Card</div>
                                    <div class="p-4 flex justify-center items-center" style="border: 1px solid red;" @onmouseover="@(e => hoveringItem(6))">Storage</div>
                                    <div class="p-4 flex justify-center items-center" style="border: 1px solid red;" @onmouseover="@(e => hoveringItem(7))">Power Supply</div>
                                    <div class="p-4 flex justify-center items-center" style="border: 1px solid red;" @onmouseover="@(e => hoveringItem(8))">Case</div>
                                </div>
                            </div>
                        </div>
                    </FluentWizardStep>
                    @foreach (var step in steps) {
                        <FluentWizardStep Label="@step.Label" OnChange="@OnStepChange">
                            <AssemblyStep order="order" />
                            <!-- TODO: pass only the part to Assemble and the step since the layout structure is always the same -->
                        </FluentWizardStep>
                    }
                </Steps>
            </FluentWizard>
        </div>
    }
}

@code {
    [Parameter]
    public int Id { get; set; }

    private Order? order;
    public class Steps {
        public string? Label { get; set; }
    }

    private List<Steps> steps = new List<Steps> {
        new Steps { Label = "Prepare Case" },
        new Steps { Label = "Place Power Supply" },
        new Steps { Label = "Install Motherboard" },
        new Steps { Label = "Install CPU" },
        new Steps { Label = "Install RAM" },
        new Steps { Label = "Install GPU" },
        new Steps { Label = "Install Storage" },
        new Steps { Label = "Install Cooling" },
        new Steps { Label = "Finalize" },
    };

    protected override async Task OnParametersSetAsync() {
        if (Id <= 0) {
            // Invalid ID
            order = null;
            return;
        }
        // Fetch the order using FindOneAsync
        order = await OrdersDb.FindOneAsync(o => o.OrderId == Id);
    }

    private void OnStepChange(FluentWizardStepChangeEventArgs e) {
        Console.WriteLine($"Go to step {e.TargetLabel} (#{e.TargetIndex})");
    }

    private void OnFinishedAsync() {
        Console.WriteLine("Wizard finished");
    }

    private string imageUrl { get; set; } = "/assets/pcbuild-step-0.png";

    private void hoveringItem(int item) {
        switch (item) {
            case 1:
                imageUrl = "/assets/pcbuild-step-1.png";
                break;
            case 2:
                imageUrl = "/assets/pcbuild-step-2.png";
                break;
            case 3:
                imageUrl = "/assets/pcbuild-step-3.png";
                break;
            case 4:
                imageUrl = "/assets/pcbuild-step-4.png";
                break;
            case 5:
                imageUrl = "/assets/pcbuild-step-5.png";
                break;
            case 6:
                imageUrl = "/assets/pcbuild-step-6.png";
                break;
            case 7:
                imageUrl = "/assets/pcbuild-step-7.png";
                break;
            case 8:
                imageUrl = "/assets/pcbuild-step-8.png";
                break;
            default:
                imageUrl = "/assets/pcbuild-step-0.png";
                break;
        }
    }

    private void goToStep(int step) {
        Console.WriteLine($"Go to step {step}");
    }
}

<style scoped>
    .h-screen-space {
        /* Calculate the height of the screen without the height of the header */
        height: calc(100vh - 12.0rem);
    }
</style>