@page "/dashboard/orders"
@attribute [Authorize(Roles = "Admin")]
@layout DashboardLayout
@attribute [StreamRendering]
@rendermode InteractiveServer
<PageTitle>PCMount - Orders</PageTitle>

@inject NavigationManager Navigation
@inject OrdersService OrdersDb

@if (ordersQueryable != null) {
    <FluentDataGrid Items="@ordersQueryable" ShowHover="true" Pagination="@pagination">
        <PropertyColumn Property="@(o => o.OrderId)" Title="Order ID" InitialSortDirection=SortDirection.Ascending Sortable="true" IsDefaultSortColumn=true />
        <PropertyColumn Property="@(o => o.Name)" Title="Name" />
        <PropertyColumn Property="@(o => o.Status)" Title="Status" />
        <PropertyColumn Property="@(o => o.Price)" Title="Price" />
        <TemplateColumn Title="Actions" Align="@Align.End">
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Wrench())" @onclick="() => Navigation.NavigateTo(getOrderAssemblyPath(context.OrderId!))"></FluentButton>
            <FluentButton IconEnd="@(new Icons.Regular.Size16.Delete())" @onclick="() => deleteOrder(context.OrderId!)"></FluentButton>
        </TemplateColumn>
    </FluentDataGrid>
}

<FluentPaginator State="@pagination">
    <SummaryTemplate>
        Total Orders: <strong>@(pagination.TotalItemCount ?? 0)</strong>
    </SummaryTemplate>
    <PaginationTextTemplate>
        Page <strong>@(pagination.CurrentPageIndex + 1)</strong> of <strong>@(pagination.LastPageIndex + 1)</strong>
    </PaginationTextTemplate>
</FluentPaginator>

@code {
    record OrderQuery(int OrderId, string? Name, string? Status, string? Price);
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    IQueryable<OrderQuery> ordersQueryable = Array.Empty<OrderQuery>().AsQueryable();
    Order[]? orders;

    protected override async Task OnInitializedAsync() {
        // Set the orders queryable
        orders = await OrdersDb.GetArrayAsync();
        foreach (Order order in orders) {
            ordersQueryable = ordersQueryable.Append(new OrderQuery(order.OrderId, order.Name, order.Status.ToString(), order.Price.ToString()));
        }
    }

    private string getOrderAssemblyPath(int orderId) {
        return $"/dashboard/assembly/{orderId}";
    }

    private async void deleteOrder(int orderId) {
        await OrdersDb.DeleteAsync(orderId);
        orders = await OrdersDb.GetArrayAsync();
        ordersQueryable = Array.Empty<OrderQuery>().AsQueryable();
        foreach (Order order in orders) {
            ordersQueryable = ordersQueryable.Append(new OrderQuery(order.OrderId, order.Name, order.Status.ToString(), order.Price.ToString()));
        }
        StateHasChanged();
    }
}